windows编译
用管理员打开VS的CMD，打开源码目录，执行
perl Configure VC-WIN32 --prefix="E:\GMSSL\x86"
nmake进行编译32位，编译会出现
libcrypto-1_1.def : error LNK2001: 无法解析的外部符号 EVP_get_ciphernames
libcrypto-1_1.def : error LNK2001: 无法解析的外部符号 EVP_get_digestnames
libcrypto.lib : fatal error LNK1120: 2 个无法解析的外部命令
NMAKE : fatal error U1077: “link”: 返回代码“0x1”
解决上述问题：在历史中找到旧版本的crypto\evp\names2.c文件覆盖你下载的新版本里的同名文件就可以了

编译64位程序：以管理员权限打开“x64 Native Tools Command Prompt for VS 2019” cmd
perl Configure VC-WIN64A --prefix="E:\GMSSL\x64"，nmake

android编译
gmssl交叉编译android，需要设置相关环境变量，环境变量如下，其中勿忘设置CROSS_SYSROOT，另外下载了NDK后，可通过
ANDROID_PATH=ndk文件路径
PLATFORM_VERSION=22
MAKE_TOOLCHAIN=$ANDROID_PATH/sdk/ndk-bundle/build/tools/make-standalone-toolchain.sh
export TOOLCHAIN_PATH=$ANDROID_PATH/android-toolchain-arm
$MAKE_TOOLCHAIN --arch=arm --platform=android-$PLATFORM_VERSION --isnstall-dir=$TOOLCHAIN_PATH
来生成相应版本的编译工具，另外对于PLATFORM_VERSION的版本对应的是不同的安卓版本（可参考https://www.cnblogs.com/liaojie970/p/5760123.html）
编译gmssl步骤：
1.source cross-compile-env-prep.sh，设置环境变量
2.到gmssl代码目录下执行./Configure android-armeabi --prefix=xx no-asm
3.make即可编译